// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package de.thischke.sudoku.model;

import java.util.ArrayList;
import java.util.List;

public class FieldToInspectBuilder extends FieldToInspectBuilderBase<FieldToInspectBuilder> {
	public static FieldToInspectBuilder fieldToInspect() {
		return new FieldToInspectBuilder();
	}

	public FieldToInspectBuilder() {
		super(new FieldToInspect());
	}

	public FieldToInspect build() {
		return getInstance();
	}
}

class FieldToInspectBuilderBase<GeneratorT extends FieldToInspectBuilderBase<GeneratorT>> {
	private FieldToInspect instance;

	protected FieldToInspectBuilderBase(FieldToInspect aInstance) {
		instance = aInstance;
	}

	protected FieldToInspect getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withPossibilities(List<Integer> aValue) {
		instance.setPossibilities(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedPossibility(Integer aValue) {
		if (instance.getPossibilities() == null) {
			instance.setPossibilities(new ArrayList<Integer>());
		}

		((ArrayList<Integer>) instance.getPossibilities()).add(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withField(Field aValue) {
		instance.setField(aValue);

		return (GeneratorT) this;
	}

	public FieldFieldBuilder withField() {
		Field obj = new Field();

		withField(obj);

		return new FieldFieldBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withX(int aValue) {
		instance.setX(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withY(int aValue) {
		instance.setY(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withSelf(Boolean aValue) {
		instance.setSelf(aValue);

		return (GeneratorT) this;
	}

	public class FieldFieldBuilder extends FieldBuilderBase<FieldFieldBuilder> {
		public FieldFieldBuilder(Field aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endField() {
			return (GeneratorT) FieldToInspectBuilderBase.this;
		}
	}

	public static class FieldBuilderBase<GeneratorT extends FieldBuilderBase<GeneratorT>> {
		private Field instance;

		protected FieldBuilderBase(Field aInstance) {
			instance = aInstance;
		}

		protected Field getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Integer aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPossibilities(List<Integer> aValue) {
			instance.setPossibilities(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedPossibility(Integer aValue) {
			if (instance.getPossibilities() == null) {
				instance.setPossibilities(new ArrayList<Integer>());
			}

			((ArrayList<Integer>) instance.getPossibilities()).add(aValue);

			return (GeneratorT) this;
		}
	}
}
